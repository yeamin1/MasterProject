geyser1=optim(c(0.5,55,5,80,5),nllhood,y=waiting,hessian=T,
control=list(reltol=1e-10))
sqrt(diag(solve(geyser1$hess)))
#The above works but produces warnings about NaNs in log(x)
#This can be prevented by specifying some bounds:
geyser2=optim(c(0.5,55,5,80,5),nllhood,y=waiting,hessian=T,
lower=c(0,0,1,0,1),upper=c(1,100,100,100,100))
sqrt(diag(solve(geyser2$hess)))
#Using nlm
geyser.nlm=nlm(nllhood,c(0.5,55,5,80,5),y=waiting,hessian=T)
sqrt(diag(solve(geyser.nlm$hess)))
21/6
24/6
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,10,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,10,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,70,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof(“myFunction.out”)
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof('myFunction.out')4
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof('myFunction.out')
?barplot
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
require(grDevices) # for colours
tN <- table(Ni <- stats::rpois(100, lambda = 5))
r <- barplot(tN, col = rainbow(20))
#- type = "h" plotting *is* 'bar'plot
lines(r, tN, type = "h", col = "red", lwd = 2)
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
barplot(VADeaths, plot = FALSE)
barplot(VADeaths)
barplot(tN, space = 1.5, axisnames = FALSE,
sub = "barplot(..., space= 1.5, axisnames = FALSE)")
barplot(VADeaths, add = TRUE)
legend(1,c(1,2,3,4))
legend(1,2,c(1,2,3,4))
windows()
plot(1,1)
windows()
plot(1,2)
plot.window(xlim = 1:2, ylim = 3:4)
plot.window(xlim = 1:2, ylim = 3:4, clim = 4)
plot.window(xlim = 1:2, ylim = 3:4, alim = 4)
plot.window(xlim = 1:2, ylim = 3:4, alim = 4, blim = 3)
momth.abb
month.abb
plot(1:100)
axis(100)
axis(at = 100)
axis(at = 100, 3)
text(50,50,'awe\nwef')
1 + 0.8 + 0.8 ^2
a = (1^2/ (1 - (-0.9)^2))
a
4 * a + 6 *(-0.9) * a + 4 * (-0.9)^2 * (-0.9) + 2 * (-0.9)^3 * (-0.9)
4 * a + 6 *(-0.9) * a + 4 * (-0.9)^2 * (-0.9) + 2 * (-0.9)^3 * a
4 * a
6 *(-0.9) * a
4 * (-0.9)^2
ans = 4 * a + 6 *(-0.9) * a + 4 * (-0.9)^2 * (-0.9) + 2 * (-0.9)^3 * a
a
ans
ans / 4^2
2.44/4
2.44/4
0.8 / 1.64
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject/standalone/') ##at uni
x = seq(-10,10,length = 100)
y = seq(-10,10,length = 100)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
?pretty
## just make the test easilier
f = function()
{
x = seq(-10,10,length = 100)
y = seq(-10,10,length = 100)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
## main example
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
}
windows()
system.time(f())
f()
at
f()
ticks
ticks
k    ticks <<- pretty(c(min, max), nint = nint, 1, .25, c(.8, 1.7), 2)
min = ticks[1]
max = ticks[length(ticks)]
nint = length(ticks) - 1
axisTicks(range, FALSE, axp, nint = nint)
axp = 0
axp[1] = min
axp[2] = max
axp[3] = nint
axisTicks(range, FALSE, axp, nint = nint)
f()
i = nint
ticks <<- pretty(c(min, max), nint = nint, 1, .25, c(.8, 1.7), 2)
min = ticks[1]
max = ticks[length(ticks)]
nint = length(ticks) - 1
range = c(min,max)
axisTicks(range, FALSE, axp, nint = nint)
axp
nint
axisTicks(range, FALSE, axp, nint = 9)
axisTicks(range, FALSE, axp, nint = 10)
axisTicks(range, FALSE, axp, nint = 100)
axisTicks(range, FALSE, axp, nint = 10)
axp
axp = c(-10, 10, 10)
axisTicks(range, FALSE, axp, nint = 10)
pretty(c(min, max), nint = nint, 1, .25, c(.8, 1.7), 2)
pretty(c(min, max), nint = nint)
min
max
range(z)
max = min = NULL
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject/standalone/') ##at uni
f()
min
max
ticks
nint
f()
pretty(c(min, max), nint = nint, 1, .25, c(.8, 1.7), 2)
min
max
pretty(c(min, max), nint = nint)
nint
f()
f()
f()
f()
f()
f()
max
min
ticks <<- pretty(c(min, max), nint = nint)
ticks
min
max
f(
)
ticks
f()
f()
f(
)
f()
nint
nint = NULL
f()
f()
f()
f()
f()
f()
f()
f()
pretty(c(-10, 10), 9, 1, .25, c(.8, 1.7), 2)
pretty(c(-10, 10), 9)
f()
f()
f()
f()
f()
range(z)
z
range(z)
f()
f = function()
{
x = seq(-10,10,length = 100)
y = seq(-10,10,length = 100)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
## main example
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 5)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
}
f()
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
plot = recordPlot()
plot[[1]][[3]][[2]]
plot[[1]][[3]][[2]]
plot[[1]][[3]][[2]]
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
nticks = 10)
plot = recordPlot()
plot[[1]][[3]][[2]]
## main example
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
source('loading.R')
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
source('loading.R')
par(mar = c(2,2,2,2))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'detailed', nticks = 10)
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE, border = 'black',
ticktype = 'simple', nticks = 10)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
f()
out
f()
bou
bout
PerspBox
?lines
source('loading.R')
source('loading.R')
source('loading.R')
source('loading.R')
source('testing.r')
source('loading.R')
source('loading.R')
source('loading.R')
PerspBox
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
p0 = Face[f, 0]
Face
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
VT = trans
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
1 | TRUE
1 & TRUE
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
EdgeDone[Edge[f][1]]
f()
PerspBox(x = range(x), y = range(y), z = range(z))
!0
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
Edge
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(1:2)
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
plot(-0.5, 1)
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
PerspBox(x = range(x), y = range(y), z = range(z))
source('loading.R')
plot(0,0, xlim = c(-0.4, -0.5), ylim = c(-0.2, 0.05))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.4, -0.5), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.4, -0.85), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.8, -0.5), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.6, -0.5), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
4
plot(0,0, xlim = c(-0.4, -0.5), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, -0.4), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, -0.2), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, 2), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.2, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.8, 0.1))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.8, 0.8))
PerspBox(x = range(x), y = range(y), z = range(z))
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.5))
PerspBox(x = range(x), y = range(y), z = range(z))
PerspBox(0, x = range(x), y = range(y), z = range(z))
source('loading.R')
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.5))
PerspBox(0, x = range(x), y = range(y), z = range(z), trans)
PerspBox(0, x = range(x), y = range(y), z = range(z), VT = trans)
PerspBox(1, x = range(x), y = range(y), z = range(z), VT = trans)
plot(0,0, xlim = c(-0.5, 0.5), ylim = c(-0.5, 0.5))
PerspBox(1, x = range(x), y = range(y), z = range(z), VT = trans)
Gline
Glines
