}
x
}
gev.invcdf(y,a,mu,tau)
gev.invcdf(0.2,a,mu,tau)
gev.invcdf(0.5,a,mu,tau)
GEV.INV=function(data,mu,sigma,xi){
if(xi==0){
INV=mu-sigma*log(-log(1-data))}
else{
INV=mu+(sigma/xi)*(((-log(data))^(-xi))-1)}
return(INV)}
x = GEV.INV(y,a,mu,tau)
plot(y,x,type = 'l')
x
GEV.INV=function(data,xi,sigma,mu){
if(xi==0){
INV=mu-sigma*log(-log(1-data))}
else{
INV=mu+(sigma/xi)*(((-log(data))^(-xi))-1)}
return(INV)}
a = -1/2
mu = 0
tau = 1
xmin = mu - tau/a
y = seq(-1,1,length = 100)
x = GEV.INV(y,a,mu,tau)
plot(y,x,type = 'l')
x
GEV.INV=function(data,xi,mu,sigma){
if(xi==0){
INV=mu-sigma*log(-log(1-data))}
else{
INV=mu+(sigma/xi)*(((-log(data))^(-xi))-1)}
return(INV)}
a = -1/2
mu = 0
tau = 1
xmin = mu - tau/a
y = seq(-1,1,length = 100)
x = GEV.INV(y,a,mu,tau)
plot(y,x,type = 'l')
gev.invcdf(0.2,a,mu,tau)
invcgev=function(data,xi,mu,sigma){
if(xi==0){
INV=mu-sigma*log(-log(1-data))}
else{
INV=mu+(sigma/xi)*(((-log(data))^(-xi))-1)}
return(INV)}
invcgev(0.2,0.3,-0.1,0.2)
1 + -0.1886951
invcgev(0.5,0.3,-0.1,0.2)
?ddbinom
?binom
?dbinom
x = c(1,2,3,4,5)
size = rep(10,5)
size = rep(10,2)
prob = rep(0.5,2)
dbinom(x,size,prob)
size = c(10,15)
prob=c(0.5,0.2)
dbinom(x,size,prob)
dbinom(1,10,0.5)
dbinom(2,15,0.2)
dbinom(3,10,0.5)
install.packages("C:/Users/yeamin/Desktop/gev_0.1.tar.gz", repos = NULL, type = "source")
library(gev)
install.packages("C:/Users/yeamin/Desktop/WeibullG9_0.1.0.tar.gz", repos = NULL, type = "source")
library(WeibullG9)
library(WeibullG9)
install.packages("C:/Users/yeamin/Downloads/iNZightMaps-dev-integrateplots.zip", repos = NULL, type = "win.binary")
library(iNZightMaps)
data.1 = read.csv('C:/Users/yeamin/Desktop/Gapminder-2008.csv',skip = 1)
data.2 = data.1[data.1$Country %in% c('Algeria','Angola','Burkina Faso','Cameroon',
'Chad','Egypt','Libya','Mauritania','Niger',
'Nigeria','Sudan'),]
data.3 = data.1[data.1$Country %in% c('New Zealand','Australia','Japan'),]
data.4 = data.1[data.1$Country %in% c('Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium',
'Bosnia and Herzegovina', 'Bulgaria', 'Croatia',
'Cyprus','Czech Republic'),]
data("nzquakes")
system.time(iNZightPlot(Longitude,Latitude,data = nzquakes,colby = Depth,
plottype = 'map',plot.features = list(maptype = 'roadmap')))
ClickOnZoom(0.1)
rezoom(zoom =0.9)
data("nzquakes")
iNZightPlot(Longitude,Latitude,data = nzquakes,g1 = Depth,
plottype = 'map',plot.features = list(maptype = 'roadmap'))
library(iNZightPlots)
data.1 = read.csv('C:/Users/yeamin/Desktop/Gapminder-2008.csv',skip = 1)
data.2 = data.1[data.1$Country %in% c('Algeria','Angola','Burkina Faso','Cameroon',
'Chad','Egypt','Libya','Mauritania','Niger',
'Nigeria','Sudan'),]
data.3 = data.1[data.1$Country %in% c('New Zealand','Australia','Japan'),]
data.4 = data.1[data.1$Country %in% c('Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium',
'Bosnia and Herzegovina', 'Bulgaria', 'Croatia',
'Cyprus','Czech Republic'),]
data("nzquakes")
system.time(iNZightPlot(Longitude,Latitude,data = nzquakes,colby = Depth,
plottype = 'map',plot.features = list(maptype = 'roadmap')))
ClickOnZoom(0.1)
rezoom(zoom =0.9)
data("nzquakes")
iNZightPlot(Longitude,Latitude,data = nzquakes,g1 = Depth,
plottype = 'map',plot.features = list(maptype = 'roadmap'))
obj.location = 'C:/Users/yeamin/Desktop/america/Special_submarine_features.shp'
obj = readShapeSpatial(obj.location)
shp = shape.extract(obj,1)
shp$center.region
class(shp) <- c("inzightshapemap", class(shp))
saveRDS(shp,
'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/SouthAmerica.rds')
location = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/shpdata/New Zealand.rds'
obj <- iNZightShapeMap(shp.RDS = location)
obj <- iNZightShapeMap(location = obj.location,column.index = 4)
shape.extract(obj.location,1)
library(maptools)
library(grid)
library(RColorBrewer)
library(iNZightPlots)
library(RgoogleMaps)
library(countrycode)
library(stringr)
library(iNZightMaps)
ll = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/world.rds'
l2 = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/AuCity.rds'
l3 = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/Africa.rds'
l4 = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/SouthAmerica.rds'
dataIn = data.1
obj = iNZightShapeMap(l4, data.region = 'Country', data = dataIn)
var = c('BodyMassIndex_F','Cellphones','CO2Emissions',
'EnergyUsePerPerson','Imports','Inflation','Populationtotal')
bar.obj = bar.coor(obj = obj,var = var, data = dataIn, xmax = 1, ymax = 3)
system.time(plot(obj, variable = ~Imports,
region = ~Country,
data = dataIn,
col.fun = 'e',
col = '#E0FFFF',
transform = 'linear',
na.fill = '#C0C0C0',
col.offset = 0,
full.map = F,
extend.ratio = 1,
name = 'bar'))
bar.obj = bar.coor(obj = obj,var = var, data = dataIn, xmax = 1, ymax = 3)
obj <- iNZightShapeMap(ll, data.region = 'Country', data = data.4)
obj <- iNZightShapeMap(ll, data.region = 'Country', data = data.4)
iNZightPlot(CO2Emissions, Country, data = data.4, plottype = 'shapemap',#g1 = Leap.Year,
plot.features =list(
shape.object = obj,
transform = "power",
col.offset = 0,
col = "blue",
col.method = 'hue',
na.fill = '#DEB887',
full.map = F,
extend.ratio = 1,
name = 'b'
)
)
bar.obj = 1
system.time(plot(obj, variable = ~Imports,
region = ~Country,
data = dataIn,
col.fun = 'e',
col = '#E0FFFF',
transform = 'linear',
na.fill = '#C0C0C0',
col.offset = 0,
full.map = F,
extend.ratio = 1,
name = 'bar'))
iNZightPlot(population, area, data = data.1, plottype = 'shapemap',g1 = year,
plot.features =list(
shape.object = obj,
transform = "linear",
col.offset =0.2,
col = "blue",
col.method = 'r',
na.fill = 'White',
full.map = F,
extend.ratio = 3)
)
ll = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/New Zealand.rds'
data.1 = read.csv('C:/Users/yeamin/Desktop/nz.csv')
obj <- iNZightShapeMap(ll, data.region = 'area', data = data.1)
plot(obj, variable = ~population,g1 = year,
region = ~area,
data = data.1,
col.fun = 'hue',
transform = 'power',
na.fill = 'white',
col = 'blue',
offset = 0,
full.map =F,
extend.ratio = 1)
ll = 'C:/Users/yeamin/Documents/GitHub/iNZightMaps/data/New Zealand.rds'
data.1 = read.csv('C:/Users/yeamin/Desktop/nz.csv')
obj <- iNZightShapeMap(ll, data.region = 'area', data = data.1)
plot(obj, variable = ~population,g1 = year,
region = ~area,
data = data.1,
col.fun = 'hue',
transform = 'power',
na.fill = 'white',
col = 'blue',
offset = 0,
full.map =F,
extend.ratio = 1)
obj <- iNZightShapeMap(ll, data.region = 'Country', data = data.3)
iNZightPlot(ChildrenPerWoman, Country, data = data.3, plottype = 'shapemap',g1 = Leap.Year,
plot.features =list(
shape.object = obj,
transform = "linear",
col.offset =0.2,
col = "blue",
col.method = 'rainbow',
na.fill = 'White',
full.map = T,
extend.ratio = 2)
)
obj <- iNZightShapeMap(ll, data.region = 'Country', data = data.3)
iNZightPlot(ChildrenPerWoman, Country, data = data.3, plottype = 'shapemap',g1 = Leap.Year,
plot.features =list(
shape.object = obj,
transform = "linear",
col.offset =0.2,
col = "blue",
col.method = 'rainbow',
na.fill = 'White',
full.map = T,
extend.ratio = 2)
)
obj <- iNZightShapeMap(ll, data.region = 'Country', data = data.4)
iNZightPlot(CO2Emissions, Country, data = data.4, plottype = 'shapemap',#g1 = Leap.Year,
plot.features =list(
shape.object = obj,
transform = "power",
col.offset = 0,
col = "blue",
col.method = 'hue',
na.fill = '#DEB887',
full.map = F,
extend.ratio = 1,
name = 'b'
)
)
sClickOnZoom(ratio = 0.9)
srezoom(zoom = 0.9)
sClickOnZoom(ratio = 0.2)
sClickOnZoom
sClickOnZoom
?sClickOnZoom
install.packages("C:/Users/yeamin/Desktop/iNZightMaps-master.zip", repos = NULL, type = "win.binary")
library(iNZightMaps)
sClickOnZoom(ratio = 0.2)
1
boot
boot()
vignette("parallel")
vignette("parallel")
vignette
?vignette
vignette(grid)
vignette('grid')
vignette('maps')
vignette('map')
library(maptools)
vignette('maptools')
vignette('maptools')
a = vignette('grid')
print(a)
a
nlm
?nlm
data(faithful)
data(faithful)
attach(faithful)
nllhood=function(theta,y) {
p=theta[1]; mu1=theta[2]; sigma1=theta[3]; mu2=theta[4]; sigma2=theta[5]
lhood=p*dnorm(y,mu1,sigma1)+(1-p)*dnorm(y,mu2,sigma2)
return(-sum(log(lhood)))
}
geyser1=optim(c(0.5,55,5,80,5),nllhood,y=waiting,hessian=T,
control=list(reltol=1e-10))
sqrt(diag(solve(geyser1$hess)))
#The above works but produces warnings about NaNs in log(x)
#This can be prevented by specifying some bounds:
geyser2=optim(c(0.5,55,5,80,5),nllhood,y=waiting,hessian=T,
lower=c(0,0,1,0,1),upper=c(1,100,100,100,100))
sqrt(diag(solve(geyser2$hess)))
#Using nlm
geyser.nlm=nlm(nllhood,c(0.5,55,5,80,5),y=waiting,hessian=T)
sqrt(diag(solve(geyser.nlm$hess)))
21/6
24/6
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,10,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,10,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
library(grid)
## subsetting the information from the example, but I am not using this as example, but I will create a new 3-d plot
#example(persp)
#x <- recordPlot()
#info = x[[1]][[3]][[2]]
#x = unlist(info[2])
#y = unlist(info[3])
#z = info[4][[1]]
##polygon version
x = seq(-10,70,length = 80)
y = seq(-10,10,length = 80)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
## setting and getting the information about the plot from the 'persp'
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 30, phi = 30, expand = 0.5, col = "NA")
lim = par("usr")
## create a viewport
vp <- viewport(0.5,0.5,1,1,name = 'VP:PLOTlayout',xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
p = list()
a = out = 0
s = length(x)
## translation of 3D to 2D
xy = trans3d(rep(x,eeach = s),
rep(y,each = s),
c(z), trans)
## the total number of polygon that we need to draw
total = length(z) - s - 1
for(i in 1:total)
{
p1 = c(xy$x[i],xy$y[i])
p2 = c(xy$x[1+i],xy$y[1+i])
p3 = c(xy$x[1+s+i],xy$y[1+s+i])
p4 = c(xy$x[s+i],xy$y[s+i])
p5 = c(xy$x[i],xy$y[i])
##because there is an issue of 'the new polygon is the the new polygon, actually it is the polygon that connect the first xy to the last xy of each row'
if(!(i %in% seq(s,total,s)))
p[[i]] = rbind(p1,p2,p3,p4,p5)
}
out = do.call(rbind,p)
id = rep(1:(dim(out)[1]/5),each = 5)
order = nrow(out):1
grid.polygon(out[order,1],out[order,2],default.units = 'native',gp = gpar(col = 5,fill = 'Gray'),id = id)
#b= 900
#for(a in 1:b)
#{
#  if(!(a %in% seq(s,total,s)))
#    grid.polygon(p[[a]][,1],p[[a]][,2],default.units = 'native',gp = gpar(col = 5,fill = 'NA'))
#}
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof(“myFunction.out”)
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof('myFunction.out')4
Rprof('myFunction.out')
y <- myFunction(x)  # this is the function to profile
Rprof(NULL)
summaryRprof('myFunction.out')
setwd('C:/Users/yeamin/Desktop/stats769/MasterProject/MasterProject/standalone')
source('loading.R')
grid.text()
?grid.text
?text
?text
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject') ##at uni
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject') ##at uni
x = seq(-10,10,length = 100)
y = seq(-10,10,length = 100)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
source('loading.R')
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject') ##at uni
source('loading.R')
setwd('C:/Users/yeamin/Desktop/mproject/MasterProject/standalone/') ##at uni
source('loading.R')
View(f)
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = TRUE)
per(plot = plotInfo)
perFinal()
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = FALSE)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = TRUE)
1
per(plot = plotInfo)
1
perFinal()
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = FALSE)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = FALSE)
per(plot = plotInfo)
perFinal()
## main example
source('loading.R')
par(mar = c(0,0,0,0))
trans <- persp(x, y, z, theta = 20,
phi = 30, expand = 0.5,
col = "orange", box = TRUE)
plot = recordPlot()
plotInfo = perInit(plot, trans, newpage = TRUE)
per(plot = plotInfo)
perFinal()
