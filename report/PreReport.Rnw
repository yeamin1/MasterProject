\documentclass[9pt]{report}
\usepackage{mathtools}
\begin{document}
\SweaveOpts{concordance=TRUE}
\setlength{\parindent}{0}

\title{Emulate \texttt{persp} plot and \texttt{filled.contour} plot on \texttt{gridGraphics}}
\maketitle
\section{Introduction}
<<R0, echo = FALSE>>=
library(grid)
library(gridGraphics)
@
\subsection*{Background}
The core graphics system in R can been divided in to two main packages. The first package is the graphics package. It is older and it provides the original GRZ graphics system from S, sometimes referred to as ``traditional'' graphics. It is relatively fast and many other R packages build on top of it. The newer package is the grid package. It is actually slower but is has more flexibility and additional features compared to the graphics package. \\

A graph that is drawn using grid can been edited in many more ways than a graph that has been drawn using the basic graphics package. However, there is a new package, called \texttt{gridGraphics}, which allows us to convert a plot that has been drawn by the \texttt{graphics} package to an equivalent plot drawn by \texttt{grid} graphics. This means that the additional flexibility and features of grid become available for any plot drawn using the \texttt{graphics} package. \\

\subsection*{The \texttt{gridGraphics} package}
\texttt{gridGraphics} is like a 'translator' that translates a plot that has been drawn using the basic graphics package to a plot that has been drawn using the grid package. \\

The \texttt{gridGraphic} package has a main function called \texttt{grid.echo()}, which takes a recorded plot as an argument (or NULL for the current plot of the current graphics device). The grid.echo() replicates the plot using grid so that the user may edited the plot in more ways than they can with the original plot drawn by basic graphic package.\\

The following code provides a quick example. We generate 25 random numbers for x and y. First, we draw a scatter plot using the function \texttt{plot()} from the basic graphics package, then we redraw it using \texttt{grid.echo()} from the \texttt{gridGraphics} package with grid.
<<R1, echo=TRUE, eval = TRUE>>=
pdf("figure/report_basic_demo_%0d.pdf", onefile=FALSE)
dev.control("enable")
set.seed(110)
x = runif(25)
y = runif(25)
plot(x,y, pch = 16)
grid.echo()
@
\begin{figure}[h]
\begin{center}
  \includegraphics[height = 6cm, width = 6cm]{figure/report_basic_demo_1.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/report_basic_demo_1.pdf}
  \caption{The left plot is drawn by using plot(); the Right plot is redrawn using grid.echo(). Overall, two plots are identical to each other}
  	\label{figure1}
\end{center}
\end{figure}
One example that shows the advantage of drawing the plot using grid rather than basic graphics is that there are objects, called grid grobs, which recorded a list of the details of each components of the plot that has been drawn. The list of grobs can been seen by calling the function \texttt{grid.ls()}. \\
<<R5, eval = TRUE>>=
grid.ls()
@

<<R5.2, results = hide, echo=FALSE>>=
dev.off()
@

As we see, the \texttt{grid.ls()} function returns a list of grid grobs for the previous plot that has been redrawn by \texttt{grid}. There is one element called "graphics-plot-1-bottom-axis-labels-1" which represents the labels of the bottom axis. In \texttt{grid}, there are several functions that can be used to manipulate this grob. For example, if the user wants to rotate the labels of the bottom axis by 30 degrees and changes the color from default to orange, then the following code performs these changes.\\

<<R6.1,eval = TRUE, echo=FALSE>>=
pdf("figure/report_basic_demo_4.pdf", onefile = FALSE)
dev.control("enable")
set.seed(110)
plot(x,y, pch = 16)
grid.echo(newpage = FALSE)
@

<<R6, eval=TRUE>>=
grid.edit("graphics-plot-1-bottom-axis-labels-1", 
          rot=30, gp=gpar(col="orange"))
grid.edit("graphics-plot-1-left-axis-labels-1", 
          rot=30, gp=gpar(col="orange"))
@

<<R6.2, results = hide, echo = FALSE>>=
dev.off()
@
\begin{figure}[h]
\begin{center}
  \includegraphics[height = 7cm, width = 7cm]{figure/report_basic_demo_4.pdf}
  \caption{The angle and the color of the bottom and left axis of the previous plot have been changed by 30 degrees and orange}
  	\label{figure3}
\end{center}
\end{figure}
\subsection*{The problem}
The \texttt{grid.echo()} function can replicate most plots that are drawn by the graphics package. However, there are a few functions in the graphics package that \texttt{grid.echo()} cannot replicate. One such function is persp() which draws 3-dimemtional surfaces, the other one is the \texttt{filled.contour()}. If we can draw a plot with \texttt{persp()} or \texttt{filled.countour(),} the result from calling \texttt{grid.echo()} is a (mostly) blank screen. \\

<<R7.1, eval = TRUE, echo = FALSE>>=
pdf("figure/report_fill_%0d.pdf", onefile=FALSE)
dev.control("enable")
@

<<R7, eval = TRUE>>=
x <- y <- seq(-4*pi, 4*pi, len = 27)
r <- sqrt(outer(x^2, y^2, "+"))
filled.contour(cos(r^2)*exp(-r/(2*pi)), frame.plot = FALSE, plot.axes = {})
grid.echo()
@

<<R7.2, eval = TRUE, echo = FALSE, results = hide>>=
dev.off()
@
\begin{figure}[h]
\begin{center}
  \includegraphics[height = 6cm, width = 6cm]{figure/report_fill_1}
  \includegraphics[height = 6cm, width = 6cm]{figure/report_fill_2}
  \caption{The left plot been drawn by using \texttt{filled.contour} and the right plot been redrawn by calling \texttt{grid.echo()}. There is a "blank" page on the right plot because the grid.echo cannot emulate filled.contour()}
  	\label{figure4}
\end{center}
\end{figure}

\newpage
\subsection{Aim of this project}
The purpose of this paper is emulate the Perspective Plots, \texttt{persp()} and Level (Contour) Plots, \texttt{filled.contour()} into \texttt{grid} package. However, these two functions are written by C, which is difficult for debugging and tracking. The solution of this paper as follows: 
\begin{enumerate}
  \item emulate the \texttt{persp()} function on \texttt{grid} separate from the \texttt{gridGraphics} package (standalone):
    \begin{enumerate}
      \item Extract the information from the graphics engine display list.
      \item Understanding and translating the calculation that been done by C code from the \texttt{graphics} package to R code
      \item Draw the Perspective Plot on \texttt{grid}.
    \end{enumerate}
  \item Connect the standalone to the \texttt{gridGraphics}
\end{enumerate}



% NOTE to Jason: explain how gridGraphics works first: graphics display list; gridGraphics implements an R version of each low-level C function on the display list (e.g., for C\_plot\_xy there is an R function called C\_plot\_xy in the gridGraphics package). THEN maybe write about 3D to 2D transformations, but only maybe.% 


\section*{The graphics engine display list}
The information for every plot drawn by R can be recorded. For example, In the simple \texttt{plot()} function, it is possible to obtain the parameters for x and y, even the label of the x-axis and y-axis.\\

This information is called the graphics engine display list. In this paper, we use this graphics engine display list to replicate the \texttt{persp()} plot and texttt{filled.contour()} plot using grid.\\

The \texttt{recordPlot()} function can be used to access the graphics engine display list, the \texttt{recordPlot()} function been used. This function saves the plot in an R object. 
<<R8.1, echo = FALSE>>=
pdf("figure/report_3.pdf", onefile=FALSE)
dev.control("enable")
@

<<R8>>=
plot(cars$speed[1:25], cars$dist[1:25], col = 'orange', 
      pch = 16, xlab = 'speed', ylab = 'dist')
reco = recordPlot()
reco[[1]][[4]][[2]][[2]]
@

<<R8.2, echo = FALSE, results = hide>>=
dev.off()
@

\begin{figure}[h]
\begin{center}
  \includegraphics[height = 8cm, width = 8cm]{figure/report_3}
  \caption{The details of the plot of dist vs speed displayed by the graphics engine display list}
  	\label{figure4}
\end{center}
\end{figure}

The example demonstrates how to access the graphics engine display list of a plot drawn by \texttt{plot}. The values of x and y, the labels of x-axis and y-axis been displayed.



\section*{Standalone}
The Perspective Plots \texttt{persp()} is used to draw a surface over the x-y plane. Usually, it has three main argument, \textbf{x, y, z}. Where \textbf{x} and \textbf{y} are the locations of grid line which the value z been measured, \textbf{z} is a matrix which containing the values that been used to plot, or it is the matrix that been calculated by a specific function, such as 3-D mathematical functions. The following example shows how to draw a obligatory mathematical surface rotated sinc function on Perspective Plot.\\

<<standalone_1.1, echo = FALSE>>=
pdf("figure/standalone_1.pdf", onefile=FALSE)
dev.control("enable")
par(mar = c(0,0,0,0))
@

<<standalone_1, echo = TRUE>>=
x = y = seq(-10, 10, length= 60)
f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
z[is.na(z)] <- 1
trans = persp(x, y, z, theta=30, phi = 20, expand = 0.5,
              col = 'White', border = 'orange')
@



\begin{figure}[h]
\begin{center}
  \includegraphics[height = 10cm, width = 10cm]{figure/standalone_1}
  \caption{An example of Perspective Plot been drawn by \texttt{persp()}}
  	\label{figure4}
\end{center}
\end{figure}

\newpage

From the previous example, it is clearly to see that the Perspective Plots is formed by a finite number of "polygon", each polygon has 4 Vertices. If we can access the values for each Vertices of the polygon, then we can reproduce this polygon. If we can access all the values of Vertices of all polygons, then we can reproduce the Perspective Plot. \\

Inorder to emulate this plot, we need to access some information from the graphics engine display list. However, the value of the vertices is not in the display list, therefore the plot cannot be reproduced directly. But we can access value of \textbf{x}, \textbf{y} and \textbf{z}, therefore we should re-do the calculation to get values of all vertices. The following codes show that the value of \textbf{x}, \textbf{y} and \textbf{z} which inputted by the user can been "catched" from the display list.
<<standalone_2.1, echo = TRUE>>=
reco = recordPlot()
info = reco[[1]][[3]][[2]]
## print the values of x
head(info[[2]])
## print the values of y
head(info[[3]])
## print the values of z
info[[4]][1:6, 1:2]
@
<<standalone_1.2, echo = FALSE, results=hide>>=
dev.off()
@
\subsection*{The translation from 3-D points into 2-D points}
The values of \textbf{x}, \textbf{y} and \textbf{z} can been recored from the display list, which been explained by the pervious section, the next task is to use this information to reproduce the vertics in 3-D.\\

As we know, the matrix, \textbf{z} is computed by a specific functions, given two inputs, \textbf{x} and \textbf{y}, or the expression of z can been written as: $z = f(x,y)$, it contains all the values for all combination of \empth{x} and \textbf{y} and the dimenstion of \textbf{z} is $ \textbf{dim(x)} \times \textbf{dim(y)}$.\\

One 3-dimenstions points contains a set values of $(x, y, z)$, but \textbf{z} is $\textbf{dim(x)} \times \textbf{dim(y)}$ matrix, \textbf{x} is a vector which has length of $\textbf{length(x)}$ and \textbf{y} is a vector which has length of $\textbf{length(y)}$. Inorder to produce the points, the D of \textbf{x}, \textbf{y} and \textbf{z} need to be matched and in a right order.\\

First step is the reduce the \textbf{z} $\textbf{dim(x)} \times \textbf{dim(y)}$ matrix into a one D vector which has length of $\textbf{dim(x)} \times \textbf{dim(y)}$. It can be reduced by either along x direction or y direction. In this paper, we reduced along the x direction. The second step is repeat the vector x and y until the same length of \textbf{z}. Since \textbf{z} is reduced along the x direction say $z_p$, hence we repeat x until the length of y say $x_p$, and we repeat each y by the length of \textbf{x}, say $y_p$. At last, the combination of $\x_p$, $y_p$, $z_p$ is the 3-D points which prepare for computing the vertices. \\
<<standalone_2.1>>=
xTmp = rep(x, length(y))
yTmp = rep(y,each = length(x))
zTmp = as.numeric(z)
length(xTmp) == length(zTmp) & length(yTmp) == length(zTmp)
@

The idea of transform the points into vertices is repeating the points in a right order. From pervious section, we explained that the Perspective Plots is made by finite number of polygons. Each polygon has 4 vertices. The total number of polygons are required to be drawn is depend on the length of input \textbf{x} and the length of input \textbf{y}, that is, \textbf{total = (length(x) - 1) $\times$ (length(y) - 1)}. The polygons been drawn by connecting 4 points in a specific order. The algorithm of the drawing as follows: starting from bottom-left, first connect bottom-left to bottom-right, second connect from bottom-rigth to top-right, lastly, connect top-right to top-left. Every polygon is being drawn in this order. The surface of Perspective Plots is formed until all the polygons are been drawn. \\

Before drawing the surface, the transformation of 3-D vertices into 2-D vertices is required. This transformation required two main variables, the 3-D vertices and $4 \times 4$ viewing transformation matrix \textbf{p}. The 3-dimenstion vertices are computed, the matrix \textbf{p} can been recored from the \texttt{persp()} call. This transformation can be done easily on R by using the \texttt{trans3d()} function.

<<standalone_2.2>>=
points3d = trans3d(xTmp, yTmp, zTmp, trans)
head(points3d$x)
head(points3d$y)
@

Because of we are drawing a 3-D surface in a 2-D plane, some polygons that stay 'behind' cannot been seen, it is necessary to draw the polygons in a right order. The order defined by using the \textbf{x} and \textbf{y} coordinate of the 3-D vertices (but ignore the \textbf{z} coordinate) combinding another column \textbf{1}, then do the matrix multiplication with the viewing transformation \textbf{p}. The fourth column from this multiplication is the drawing order of the polygons.
<<standalone_2.3>>=
orderTemp = cbind(xTmp, yTmp, 0, 1) %*% trans 
zdepth = orderTemp[, 4]
## the zdepth of a set of 4 points of each polygon
a = order(zdepth, decreasing = TRUE)
head(a)
@

The following figures shows how does this paper approximate to the solution. The top-left figure is drawn by plotting the transformed 2-dimenstion points, the shape of the Perspective Plots been presented. The top-right figure is drawn by connecting the points line-by-line, the shape become more obvious. The bottom-left figure is drawn by using the \texttt{grid.polygon}. By default, the origin order of the polygons is drawn along x-axis, then along y-axis. Clearly this is not the correct order. Finally, the bottom-right figure shows the true Perspective Plots by fixing the order. 
<<standalone_2.4, eval = TRUE, echo = FALSE>>=
pdf("figure/standalone_p_%0d.pdf", onefile=FALSE)
dev.control("enable")
par(mar = c(0,0,0,0))
graphics:::plot(0,0, type = 'n', 
                xlim = range(points3d$x, na.rm = TRUE), 
                ylim = range(points3d$y, na.rm = TRUE),
                asp = 1, axes = FALSE, xlab = '', ylab = '')
graphics:::points(points3d$x, points3d$y, pch = 16, cex = 0.25)
graphics:::plot(points3d$x, points3d$y, type = 'l', lty = '1212', asp = 1, axes = FALSE, xlab = '', ylab = '')
nx = length(x)
ny = length(y)
total = nx * ny
stops = (nx - 1) * (ny - 1)

xTmp = rep(x, length(y))
yTmp = rep(y,each = nx)
zTmp = as.numeric(z)

pBreak = c(1:total, 1 + 1:total, 1 + nx + 1:total, nx + 1:total)
xBreak = xTmp[pBreak]
yBreak = yTmp[pBreak]
zBreak = zTmp[pBreak]
plot.index = rep(
    c(1, 1 + total, 
    1 + 2 * total, 
    1 + 3 * total ),
    total) + rep(0:(total - 1), each = 4)
dp = rep((4 * seq(nx,total,nx)), each = 4) - (3:0)

xCoor = xBreak[c(plot.index)][-dp][1: (4 * stops)]
yCoor = yBreak[c(plot.index)][-dp][1:(4 * stops)]
zCoor = zBreak[c(plot.index)][-dp][1:(4 * stops)]
xy = trans3d(xCoor,yCoor,zCoor,trans)

grid.newpage()
lim = gridGraphics:::PerspWindow(range(x, na.rm = TRUE), 
            range(y, na.rm = TRUE), 
            range(z, na.rm = TRUE), trans, 'i')
vp = plotViewport(c(0,0,0,0), xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
grid.polygon(xy$x, xy$y, id.lengths = rep(4, length(xy$x)/4), 
             default.units = 'native', 
             gp = gpar(fill = 'white',col = 'orange'))


corn.id = 4* 1:(length(xCoor)/4)
xc = xCoor[corn.id]
yc = yCoor[corn.id]
zc = zCoor[corn.id] 
orderTemp = cbind(xc, yc, 0, 1) %*% trans 
zdepth = orderTemp[, 4]
a = order(zdepth, decreasing = TRUE)
oo = rep(1:4, length(a)) + rep(a - 1, each = 4) * 4

xyCoor = trans3d(xCoor[oo],
                yCoor[oo],
                zCoor[oo], trans)

grid.newpage()
vp = plotViewport(c(0,0,0,0), xscale = lim[1:2], yscale = lim[3:4])
pushViewport(vp)
grid.polygon(xyCoor$x, xyCoor$y, id.lengths = rep(4, length(xyCoor$x)/4),
                default.units = 'native',
                gp = gpar( fill = 'white', col = 'orange'))
@
<<standalone 2.5, results = hide, echo = FALSE>>=
dev.off()
@

\begin{figure}[h]
  \includegraphics[height = 6cm, width = 6cm]{figure/standalone_p_1.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/standalone_p_2.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/standalone_p_3.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/standalone_p_4.pdf}
  \caption{The top-left figure is only plotting the transformed 2-dimenstion points. The top-right figure is being drawn by connecting the points line-by-line. The top-right figure is drawn unorderly by using the \testtt{grid.polygon}. Finally, the bottom-left figure is drawn in a correct order.}
  	\label{figure4}
\end{figure}

\subsection*{Lighting}
The other main benifit supported by \texttt{persp()} is the shadding which it shades the surface by assuming the surface being illuminate from a given direction.\\

In \texttt{persp()}, the main parameters that user need to specify for produce a shaded perspective plots are: $ltheta$, $lphi$ and $shade$.\\

$ltheta$ and $lphi$ are used for setting up the direction of the light source. In particular, $ltheta$ specified the angle in z direction, $lphi$ specified the angle in x direction. \\

$shade$ is the parameter that specified the shade at each facets of the surface, the shades will compute as follows:
\begin{equation}
\big(\frac{1 + d}{2}\big)^{shade}
\end{equation}
Where $d$ is the dot product of the unit vector normal to each of the facet($u$) and the unit vector of the direction of the light($v$). \\

The color of each facet will be calculated by the color that recored from the graphics engine display list multiply by the \textbf{shade}. Finally, the surface been drawn by filling the colors for every facet.\\

If the normal vector is perpendicular to the direction of the light source, then $d = 0$ and the term $\big(\frac{1 + d}{2}\big)^{shade}$ will be close to 0, therefore the corrosponding facets will become darker, the brightness and darkness will depend on the value of the \textbf{shade} if shade close to 0, the term $\big(\frac{1 + d}{2}\big)^{shade}$ will close to 1. Therefore, it will look similar to non-shading plot. Simiarlly, if shade gets larger, the term close to 0 and the plot gets darker.
<<lighting_1.settup, eval = TRUE, echo = FALSE>>=
pdf("figure/Lighting_%0d.pdf", onefile=FALSE)
dev.control("enable")
@

<<lighting_1.draw, eval = TRUE, echo = TRUE>>=
trans = persp(x, y, z, theta=30, phi = 20, expand = 0.5,
 col = 'White', border = 'NA', shade = 0.5, ltheta = 30, lphi = 20)
grid.echo()
@

<<lighting_1.reset, eval = TRUE, echo = FALSE, results = hide>>=
dev.off()
@

\begin{figure}[h]
\begin{center}
  \includegraphics[height = 6cm, width = 6cm]{figure/Lighting_1.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/Lighting_2.pdf}
  \caption{Adding a light source to the perspective plot from the same angel of view. The left figure been drawn by \texttt{graphics} and the right figure been drawn by \texttt{grid}, they are identical to each other.}
  	\label{figure7}
\end{center}
\end{figure}

\newpage
\subsection*{Difference beween \texttt{C} and \texttt{R}}
As we know, most base functions of \texttt{R} are been written by \texttt{C} include \texttt{persp} and \texttt{fill.contour}. Although the structure of \texttt{C} code is quite similar to \texttt{R} code in some special case, there are some \texttt{C} code structures which behave completely different to \texttt{R}, therefore translate \texttt{C} code to \texttt{R} code is not just "copy-and-paste", even just doing direct translation.\\

\subsubsection{Pointers}
One main data structure in \texttt{C} is the pointers, which is a type of reference that records the address/location of a global object or a local variable in a function. Pointers can be manipulated by using assignment or pointer arithmetic.
<<C_demo_1, eval = FALSE, echo = TRUE>>=
# static int LimitCheck(double *lim, double *c, double *s)
# {
#     if (!R_FINITE(lim[0]) || !R_FINITE(lim[1]) || lim[0] >= lim[1])
# 	return 0;
#     *s = 0.5 * fabs(lim[1] - lim[0]);
#     *c = 0.5 * (lim[1] + lim[0]);
#     return 1;
# }
@
The top piece of code is used for checking the Limit for the \texttt{persp()} function. It also multifying the variable \textttt{c} and \texttt{s} for further calculation. In this case, the \texttt{*c} and \texttt{s*} are the pointer which will pointing to the mechine memory of \texttt{s} and \texttt{c} and multify them.\\

However, this process cannot be reproduced on \texttt{R} because \texttt{R} does not have the pointer data structure. One possible solution will be rather than doing the Limit checking and multify \texttt{s} and \texttt{c}, do the limit checking and return/assign the \texttt{s} and \texttt{c} as xs ad ys for further calculation.
<<C_demo_2, eval = FALSE, echo = TRUE>>=
# LimitCheck = function ( lim ) {
#     ## not finished yet...
#     s = 0.5 * abs(lim[2] - lim[1])
#     c = 0.5 * (lim[2] + lim[1])
#     c(s, c)
# }
# xs = LimitCheck(xr)[1]
# xc = LimitCheck(xr)[2]
# ...
@
\subsubsection{Array}
The other main difference is that \texttt{C} use array data format rather than matrix data format in \texttt{R}. However, the indexing of elements in matrix is identical to the indexing of elements in array. 
<<C_array_example>>=
#...

# FindPolygonVertices(c[k - 1], c[k],
#         x[i - 1], x[i],
#         y[j - 1], y[j],
#         z[i - 1 + (j - 1) * nx],
#         z[i + (j - 1) * nx],
#         z[i - 1 + j * nx],
#         z[i + j * nx],
#         px, py, pz, &npt);
	    

#out = FindPolygonVertices(sc[k], sc[k + 1],
#        x[i], x[i + 1],
#        y[j], y[j + 1],
#        z[i + (j - 1) * nx],
#        z[i + 1 + (j - 1) * nx],
#        z[i + (j) * nx],
#        z[i + 1 + (j) * nx],
#        px, py, pz, npt, iii = iii)
#...
@
To get the "same" elements in the matrix as the elements in the array, one solution will be that changing the matrix data format into vector data format, so that the elements will be stay the same location for both array, and matrix data format.\\

The top piece of codes is both calling the \texttt{FindPolygonVertices} function by feeding parameter into it. However, the \texttt{z} is array in the first call as it written on \texttt{C} but the second is matrix as it written on \texttt{R}. the - 1 on the \texttt{R} code because \texttt{C} starting at 0 index but \texttt{R} starting at 1.\\

The best way to reproduce this behaviours on \texttt{grid} is by translating the \texttt{C} code to \texttt{R} code directly. However, it is not as simliar as "copy-and-paste" since the structure of \texttt{C} is quite different from \texttt{R}. The following example shows the different structure between \texttt{C} and \texttt{R}.  \\

\texttt{C} allows programmer to access the address of memory location for every variable, but we have no permission on \texttt{R}, hence we need to do a bit more work. The functions on \texttt{C} (\texttt{SetToIdentity}, \texttt{XRotate} and \texttt{ZRotate}) are all accessing the memory of the variable \texttt{VT} and eidting it. The last part of \texttt{R} code is to approch the setp as \texttt{C} doee, that is, updating the matrix \texttt{VT} by keep multifying with another rotation matrix.\\

\subsection*{Box and other features}
One feather that \texttt{persp} supported is whether draw a container (box) around the surface. In Figure 5, both surface and box been drawn in the plot. However, it is necessary to find out whether the edge of the box in front of the surface or behind the surface. \\

The solution will be that translates the \texttt{C} code to \texttt{R} code directly. The reason for doing this directly translation is that R is sensitive on drawing the dot lines. More specifically, it may cause difference if we connect two points with a dotted line in different direction. Due to the purpose of this paper, the plot should be drawn as identical as possible. Therefore, the direct translation is required.\\
<<box_example_0, echo = FALSE>>=
pdf("figure/box_example_%0d.pdf", onefile=FALSE)
dev.control("enable")
par(mar = c(3,3,3,3))
@

<<box_example_1, echo = FALSE>>=
persp(x, y, z, theta=30, phi = 20, expand = 0.5, border = 'orange', 
      box = FALSE, axes = FALSE)
persp(x, y, z, theta=30, phi = 20, expand = 0.5, border = 'orange', 
      box = TRUE, axes = FALSE)
@

<<box_example_1_end, results = hide, echo=FALSE>>=
dev.off()
@
\begin{figure}[h]
\begin{center}
  \includegraphics[height = 6cm, width = 6cm]{figure/box_example_1.pdf}
  \includegraphics[height = 6cm, width = 6cm]{figure/box_example_2.pdf}
  \caption{The surace been drawn by ignore the box in the left plot, right plot drawn the surface as well as box}
  	\label{figure8}
\end{center}
\end{figure}

Other feather that \texttt{persp} supported is the detail of the axis. More specifily, the axis has three type, no axes, simple axes which only contain the label of axes, or showing the scale of each axes. These feathers are required to be reproduced by \texttt{grid}, The solution to this problem by translating the \texttt{C} code to \texttt{R} code directly.
<<axis_example_0, echo = FALSE>>=
pdf("figure/axis_example_%0d.pdf", onefile=FALSE)
dev.control("enable")
par(mar = c(3,3,3,3))
@

<<axis_example_1, echo = FALSE>>=
persp(x, y, z, theta=30, phi = 20, expand = 0.5, col = 'NA', 
              border = 'NA', axes = FALSE)
persp(x, y, z, theta=30, phi = 20, expand = 0.5, col = 'NA', 
              border = 'NA', axes = TRUE)
persp(x, y, z, theta=30, phi = 20, expand = 0.5, col = 'NA', 
              border = 'NA', axes = TRUE, ticktype = 'detail')
@

<<axis_example_1_end, results = hide, echo=FALSE>>=
dev.off()
@

\begin{figure}[h]
\begin{center}
  \includegraphics[height = 3.5cm, width = 3.5cm]{figure/axis_example_1.pdf}
  \includegraphics[height = 3.5cm, width = 3.5cm]{figure/axis_example_2.pdf}
  \includegraphics[height = 3.5cm, width = 3.5cm]{figure/axis_example_3.pdf}
  \caption{The Perspective surfaces are been ignored in this example, the left plot shows no axis been drawn, the simple axes been drawn in the middle plot and the right plot shows more detail for each axis.}
  	\label{figure8}
\end{center}
\end{figure}

\subsection*{The Filled Contour Plot}
The other tasks of this paper is to emulate the Level (Contour) Plots (\texttt{filled.contour}) from \texttt{graphics} to \texttt{grid}. As pervious section, the first step to emulate \texttt{filled.contour} is to access the information from the graphics engine display list. \\
<<filled_example_0, echo = FALSE>>=
pdf("figure/filled_example_%0d.pdf", onefile=FALSE)
dev.control("enable")
par(mar = c(3,3,3,3))
@

<<filled_example_1, echo = TRUE>>=
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
filled.contour(x, y, volcano, color = terrain.colors,
    plot.title = title(main = "The Topography of Maunga Whau",
    xlab = "Meters North", ylab = "Meters West"),
    plot.axes = { axis(1, seq(100, 800, by = 100))
                  axis(2, seq(100, 600, by = 100)) },
    key.title = title(main = "Height\n(meters)"),
    key.axes = axis(4, seq(90, 190, by = 10)))
xx = recordPlot()

info = xx[[1]][[12]][[2]]
## print the values of x
head(info[[2]])
## print the values of y
head(info[[3]])
## print the dimension of z
dim(info[[4]])
## print the length of s
length(info[[5]])
@

<<filled_example_1_end, results = hide, echo=FALSE>>=
dev.off()
@

\begin{figure}[h]
\begin{center}
  \includegraphics[height = 8cm, width = 8cm]{figure/filled_example_1.pdf}
  \caption{The topography of the Maunga Whau been drawn by using the \texttt{filled.contour}}
  	\label{figure8}
\end{center}
\end{figure}
The example shows the plot of topography of Maunga Whau and also the information from the \texttt{filled.contour} call in the graphics engine display list. Same problem as \texttt{persp()}, there is no way to reproduce this plot directly by only using the coordinates of x, y and z.\\

There is an algorithm to create this contour plot in the \texttt{graphics} package written by \texttt{C}. The first step of the solution will be translated the \texttt{C} code directly to maximize the accuracy.\\

<<filled_C_example>>=
# static void
# FindPolygonVertices(..., double *x, double *y, double *z, int *npt, ...)
# {
#   *npt = 0;
#   FindCutPoints(low, high, x1,  y1,  z11, x2,  y1,  z21, x, y, z, npt);
#   FindCutPoints(low, high, y1,  x2,  z21, y2,  x2,  z22, y, x, z, npt);
#   FindCutPoints(low, high, x2,  y2,  z22, x1,  y2,  z12, x, y, z, npt);
#   FindCutPoints(low, high, y2,  x1,  z12, y1,  x1,  z11, y, x, z, npt);
# }
@
This piece of \texttt{C} code is the algorithm used for calculate the coordinates of the vertex of each polygon in the level contour plot. The parameters $*x$, $*y$, $*z$ are the array pointers which have length of 8 individually, $*npc$ is also a pointer has length of 1. If the \texttt{FindCutPoints} is called, the elements in the arrays of $x$, $y$, $z$ will be modified. In general, we feed the location of memory of $x$, $y$, $z$ and $npt$ to \texttt{FindPolygonVertices()} and modify the values of $x$, $y$, $z$ and $npt$ within the \texttt{FindCutPoints}.\\

For example, the first call of \texttt{FindCutPoints()} modifies the elements in the pointer arrays of $x$, $y$, $z$. The location of elements in arrays been modified will depend on the parameter $*npt$. More specifically, the $*x$ as a function of $x1$ and $x2$, $y$ as a function of $y1$ and so on. The second \texttt{FindCutPoints()} is slightly different, $x$ will depend on a function of $x2$, $y$ as a function of $y1$ and $y2$. In the third \texttt{FindCutPoints()} call, $x$ will depend on a function of $x2$ and $x1$, $y$ will depend on a function of $y2$. Finally, $x$ will depend on a function of $x1$, $y$ depend on the function of $y2$ and $y1$. \\

There is no pointer data structure in \texttt{R} hence we cannot produce the same action as \texttt{C}. One approximation to this action will be as follows:
<<filled_R_example>>=
# lFindPolygonVertices = function(...)
# {
#     out = list(); npt = 0
#     out1 = lFindCutPoints(...)
#     x = y = z = numeric(8); npt = out1$npt
#     ...
#     out$x = out1$x + out2$y + out3$x + out4$y
#     out$y = out1$y + out2$x + out3$y + out4$x
#     out$npt = out4$npt
#     out
# }
@
Instead of mortify $x$, $y$, $z$ and $npt$ inside \texttt{FindCutPoints()}, record the values for $x$, $y$, $z$ and $npt$ outside the \texttt{lFindCutPoints()} call in \texttt{R} every time. At last, I combined each individual $x$ and $y$ together as the pervious \texttt{C} code behave. 


\end{document}
